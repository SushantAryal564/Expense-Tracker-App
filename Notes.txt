1. An Overview of the core flutter widgets
   App/ pagesetup
    - MaterialApp/ CupertinoApp for IOS style app.:   
    - Scaffold/ CupertinoPageScaffold: Widget gives background app bar. 
   layout widgets
    - Container: often used as a wrapper
    - Row: Items horizontally
    - Column: Items vertically
   Row and Column Children Widget
   widget to wraper around to specify how much space this child widget should consume in the wrapping row or column
    - Flexible
    - Expanded
   Content Container
    - Stack: If we want items to position on top of each other.
    - card: Prestyled container widgets with default styles.
   Repeat Element
    - ListView: Column with scrollable functionality
    - GridView: combination of row and column and scrollable.
    - ListTile: widget with default styling and default positioning or layout setup.
   Content Type
    - Text
    - Image
    - Icon
   User Input
    - TextField
    - RaisedButton/ Floatbutton
    - GestureDetector
    - InkWell
  
2. Combining widget
   Text widget take as much space as its content need. so we can set size of such widget with placing those widget inside the widget whose size can be set. 
   column and row are core widget in flutter in vertical and horizontal direction. main axis is from top to button, and cross axis is from left to right in column and vice versa for row. 
3. Contianer vs Column/ Row
  Container: Take exactly one child widget, Rich alignment & styling options like border, padding, margining and many more options like decoreation, flexible width, perfect for custom styling & alignment.
  column/Row: Takes mulitple (unlimited) child widgets, Alignment but not stylish options, always takes full available height and width, Must use if widgets sit next to above each other.
  We can combine then with each other.

4. Using the string interpolation

Fetching user Input:
texteditingcontroller is a class provided by flutter and we can assign such controller to the text field, with the help of controller argument. Such that flutter automatically connects to controllers with our text field and these controller listen to the user input.

5. Splitting the App into widgets
   As soon as we have stateful widget we should split our app so that we don't rebuild entire widget tree 
   lifting state up: It means that the common denominator 
6. Making a list scrollable
   A column take a full available height, a row a full available width. Column tries to squeeze all children it has into itself.If the child has a height which a column cannot srink child widget will not fit into the column anymore. so we need scrolling to a column. 
   SingleChildScrollView allow us to add scroll functionality but it has to be in body element.
   Flutter tried to always scroll the input, which we are editing into view and therefore it insects the page by the height of that text field, so that rext input can never be below that soft keyboard. so height of the text field is always added as a padding above the soft keyboard. 
7. Working with ListViews
   ListView is the colum with the scrollview which has a infinite height. ListView doesn't have a fixed height as it is scrollable.
   Two way of using it: ListView(childrend:[]) ListView.builder();
   - Listview is like a column with SingleChildScrollView around it. All the widgets that are children are render even it they are offscreen. With this method all the widgets that are part of the listview are rendered even if they are off screen which means that it consume a lot of memory, a lot of performance for items that aren't even visible. 
   -builder we don't have wrapping single child scroll view but we have some optimization put in place by flutter. It render the widgets that are visible only. Part that aren't on the screen aren't loaded or rendered. 

8. Flutter input and output styling and configuration
9. Adding AppBar Buttons & Floating Action Buttons
25. Showing a modal bottom sheet
    To show a sheet there is a built in function flutter offeres to us function showMOdalBottomSheet it require argument context and builder a function that needs to return a widget that should be inside of that modal sheet. 
27. Improving & styling the modal bottom sheet
    Flutter reevaluate the widgets time to time if a parent widget changes. For stateless widget when a widget is re evaluated any internally stored data is reset is lost. That's why we lose our data in a state less widget, because whenever it is reevaluated by flutter, we lose to state.
    With widget.functionName we can access function property.
    Navigator.of(context).pop();
    pop() method is used to close the top most screen.
    of(context) is required to get access to the right navigator and context is a special property which is available class wide in our state class.
28. configuring & using Theme
    We could use golbally defined color, primary color and secondary color by theming. 
    set theme in main.dart file. 
    
38. Flexible and Expanded
    sometimes we would like to tell an item to take up more space in that row or column than it would normally take using widget Flexible.
    fit property takes a FlexFit.loose:
    loose means taht the child of that flexible item besically should keep its size and use that size in the surrounding row and column. 
    tight fills the available remaining space.
    Expanded: It is a widget simply flexible with flexfit.tight so there is no fit argument. 

39. ListTile widgets
    preconfigured and styled widget with a certain layout that fits particullary well into list. 

43. Showing a DatePicker
    Future is a class built into Dart, it allows us to create objects which will give us a value in the future. We could use future for the http request. 
    Code execution in the app will not pause and wait for this to happen  the function we pass in the future generating widgets will be stored in memory and the other code will execute.

44. What does responsiv and adaptive means?
    Handling different sizes. 
    adaptive means adapting to user interface on different operating system our app runs on.
    Responsive and adaptive apps in flutter
    We have only one widget tree because flutter is all about the widget tree we have one widget at the top and all the other widget nested inside of that widget by passing widget as argument of other widgets.
    we can make our app responsive and adaptive by detecting which platform we are running on and which device size we have available in our code, in our widget tree and then we render certain sub-trees, certain individual widgets based on the platform or on the device. So, we have one widget tree but on certain point of that tree, we have an either/or decision where we render different styled widget or totally different widgets based on the size or on the platform.

45. Where we could imporve the app.
    
46. Calculating sizes dynamically.
